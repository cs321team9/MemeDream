/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memedream;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Toolkit;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.ListIterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Krystal
 */
public class UserInterface extends javax.swing.JFrame implements Observer {
    
    /**
     * Creates new form UserInterface
     */
    public UserInterface(Model mod) {
        
        model = mod;
        tagList = new ArrayList<>();
        imagesToDraw = new ArrayList<>();
        allTags = new ArrayList<>();
        imageIterator = null;
        
        initComponents();
        customInitComponents();
        
        
        java.awt.GridLayout tagLayout = new java.awt.GridLayout(0,1,5,5);
        tagPanel.setLayout(tagLayout);
        
        
    }
    /**
     *  The user can edit the theme and the sorting type
     */
    private void customInitComponents()
    {
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Only jpg and png supported", "jpg", "png");
        imageChooserWindow.setFileFilter(fileFilter);
        
        if(model.getBackgroundTheme() == "light")
        {
            menuBarLightThemeButton.doClick();
        }
        else
        {
            menuBarDarkThemeButton.doClick();
        }
        
        if(model.getSortingType() == "alphabetical")
        {
            menuBarAlphabeticalSortButton.doClick();
        }
        else
        {
            menuBarRatingSortButton.doClick();
        }
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addImageDialogue = new javax.swing.JDialog();
        titleInputField = new javax.swing.JTextField();
        tagsInputField = new javax.swing.JTextField();
        ratingSlideBar = new javax.swing.JSlider();
        filepathInputField = new javax.swing.JTextField();
        openFileChooserButton = new javax.swing.JButton();
        addImageFinalizeButton = new javax.swing.JButton();
        imageNameLabel = new javax.swing.JLabel();
        tagsLabel = new javax.swing.JLabel();
        ratingLabel = new javax.swing.JLabel();
        filePathNameLabel = new javax.swing.JLabel();
        imageChooserWindow = new javax.swing.JFileChooser();
        imageViewTagsPopupMenu = new javax.swing.JPopupMenu();
        imageViewAddTags = new javax.swing.JMenuItem();
        imageViewMenuItemDeleteTag = new javax.swing.JMenuItem();
        addTagsDialogue = new javax.swing.JDialog();
        addTagsInputField = new javax.swing.JTextField();
        addTagsDialogFinishButtn = new javax.swing.JButton();
        addTagsInstructionLabel = new javax.swing.JLabel();
        themeButtonGroup = new javax.swing.ButtonGroup();
        sortButtonGroup = new javax.swing.ButtonGroup();
        baseView = new javax.swing.JPanel();
        tagScroller = new javax.swing.JScrollPane();
        tagPanel = new javax.swing.JPanel();
        searchBar = new javax.swing.JTextField();
        galleryView = new GalleryView();
        searchBarLabel = new javax.swing.JLabel();
        imageView = new javax.swing.JPanel();
        imagePanel = new javax.swing.JPanel();
        scrollImageViewTagPanel = new javax.swing.JScrollPane();
        imageViewTagsList = new javax.swing.JList<>();
        nextImageButton = new javax.swing.JButton();
        previousImageButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        imageViewRatingSlider = new javax.swing.JSlider();
        imageViewTitleLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        menuBarEditMenu = new javax.swing.JMenu();
        menuBarAlphabeticalSortButton = new javax.swing.JRadioButtonMenuItem();
        menuBarRatingSortButton = new javax.swing.JRadioButtonMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuBarLightThemeButton = new javax.swing.JRadioButtonMenuItem();
        menuBarDarkThemeButton = new javax.swing.JRadioButtonMenuItem();

        addImageDialogue.setBounds(new java.awt.Rectangle(200, 200, 400, 350));
        addImageDialogue.setModal(true);
        addImageDialogue.setResizable(false);

        titleInputField.setText("Funny Name");

        tagsInputField.setText("tag1, tag2, tag3, tag4");

        ratingSlideBar.setMajorTickSpacing(1);
        ratingSlideBar.setMaximum(5);
        ratingSlideBar.setMinimum(1);
        ratingSlideBar.setPaintLabels(true);
        ratingSlideBar.setPaintTicks(true);
        ratingSlideBar.setSnapToTicks(true);
        ratingSlideBar.setValue(3);

        filepathInputField.setToolTipText("This will show the filepath of your image. Use the browse button to select your file.");

        openFileChooserButton.setText("Browse");
        openFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileChooserButtonActionPerformed(evt);
            }
        });

        addImageFinalizeButton.setText("Add Image");
        addImageFinalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageFinalizeButtonActionPerformed(evt);
            }
        });

        imageNameLabel.setText("Image Name:");

        tagsLabel.setText("Tags:");

        ratingLabel.setText("Rating");

        filePathNameLabel.setText("File Path");

        javax.swing.GroupLayout addImageDialogueLayout = new javax.swing.GroupLayout(addImageDialogue.getContentPane());
        addImageDialogue.getContentPane().setLayout(addImageDialogueLayout);
        addImageDialogueLayout.setHorizontalGroup(
            addImageDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addImageDialogueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addImageDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addImageDialogueLayout.createSequentialGroup()
                        .addComponent(ratingSlideBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addImageDialogueLayout.createSequentialGroup()
                        .addGroup(addImageDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(filepathInputField)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addImageDialogueLayout.createSequentialGroup()
                                .addGroup(addImageDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(addImageDialogueLayout.createSequentialGroup()
                                        .addComponent(tagsLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tagsInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addImageDialogueLayout.createSequentialGroup()
                                        .addComponent(imageNameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(titleInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 12, Short.MAX_VALUE)))
                        .addGap(9, 9, 9)
                        .addComponent(openFileChooserButton)
                        .addGap(12, 12, 12))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addImageDialogueLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ratingLabel)
                .addGap(182, 182, 182))
            .addGroup(addImageDialogueLayout.createSequentialGroup()
                .addGroup(addImageDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addImageDialogueLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(filePathNameLabel))
                    .addGroup(addImageDialogueLayout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(addImageFinalizeButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addImageDialogueLayout.setVerticalGroup(
            addImageDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addImageDialogueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filePathNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addImageDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filepathInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openFileChooserButton))
                .addGap(43, 43, 43)
                .addGroup(addImageDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addImageDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tagsInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tagsLabel))
                .addGap(22, 22, 22)
                .addComponent(ratingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ratingSlideBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addImageFinalizeButton)
                .addGap(23, 23, 23))
        );

        imageChooserWindow.setAcceptAllFileFilterUsed(false);
        imageChooserWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageChooserWindowActionPerformed(evt);
            }
        });

        imageViewAddTags.setText("Add Tags");
        imageViewAddTags.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageViewAddTagsActionPerformed(evt);
            }
        });
        imageViewTagsPopupMenu.add(imageViewAddTags);

        imageViewMenuItemDeleteTag.setText("Delete Selected Tag");
        imageViewMenuItemDeleteTag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageViewMenuItemDeleteTagActionPerformed(evt);
            }
        });
        imageViewTagsPopupMenu.add(imageViewMenuItemDeleteTag);

        addTagsDialogue.setTitle("Add Tags Window");
        addTagsDialogue.setBounds(new java.awt.Rectangle(200, 200, 400, 350));
        addTagsDialogue.setModal(true);

        addTagsDialogFinishButtn.setText("Add Tags");
        addTagsDialogFinishButtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTagsDialogFinishButtnActionPerformed(evt);
            }
        });

        addTagsInstructionLabel.setText("Add your tags in the field below");

        javax.swing.GroupLayout addTagsDialogueLayout = new javax.swing.GroupLayout(addTagsDialogue.getContentPane());
        addTagsDialogue.getContentPane().setLayout(addTagsDialogueLayout);
        addTagsDialogueLayout.setHorizontalGroup(
            addTagsDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTagsDialogueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addTagsDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addTagsDialogueLayout.createSequentialGroup()
                        .addComponent(addTagsInputField)
                        .addContainerGap())
                    .addGroup(addTagsDialogueLayout.createSequentialGroup()
                        .addComponent(addTagsInstructionLabel)
                        .addGap(0, 27, Short.MAX_VALUE))))
            .addGroup(addTagsDialogueLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(addTagsDialogFinishButtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        addTagsDialogueLayout.setVerticalGroup(
            addTagsDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addTagsDialogueLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(addTagsInstructionLabel)
                .addGap(18, 18, 18)
                .addComponent(addTagsInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(addTagsDialogFinishButtn)
                .addGap(21, 21, 21))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(990, 729));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.CardLayout());

        tagScroller.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        tagScroller.setMaximumSize(new java.awt.Dimension(32767, 634));

        javax.swing.GroupLayout tagPanelLayout = new javax.swing.GroupLayout(tagPanel);
        tagPanel.setLayout(tagPanelLayout);
        tagPanelLayout.setHorizontalGroup(
            tagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 118, Short.MAX_VALUE)
        );
        tagPanelLayout.setVerticalGroup(
            tagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 631, Short.MAX_VALUE)
        );

        tagScroller.setViewportView(tagPanel);

        searchBar.setToolTipText("");
        searchBar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchBarCaretUpdate(evt);
            }
        });

        searchBarLabel.setText("Search by Name:");

        javax.swing.GroupLayout baseViewLayout = new javax.swing.GroupLayout(baseView);
        baseView.setLayout(baseViewLayout);
        baseViewLayout.setHorizontalGroup(
            baseViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(baseViewLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(searchBarLabel)
                .addContainerGap(916, Short.MAX_VALUE))
            .addGroup(baseViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(baseViewLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(tagScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(12, 12, 12)
                    .addGroup(baseViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(galleryView, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
                        .addGroup(baseViewLayout.createSequentialGroup()
                            .addComponent(searchBar)
                            .addGap(95, 95, 95)))
                    .addContainerGap()))
        );
        baseViewLayout.setVerticalGroup(
            baseViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(baseViewLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(searchBarLabel)
                .addContainerGap(735, Short.MAX_VALUE))
            .addGroup(baseViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(baseViewLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(baseViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(baseViewLayout.createSequentialGroup()
                            .addComponent(galleryView, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                            .addGap(78, 78, 78))
                        .addComponent(tagScroller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap()))
        );

        getContentPane().add(baseView, "card2");

        imageView.setPreferredSize(new java.awt.Dimension(990, 729));

        imagePanel.setPreferredSize(new java.awt.Dimension(400, 400));
        imagePanel.setLayout(new java.awt.GridLayout(1, 0));

        scrollImageViewTagPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        imageViewTagsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        imageViewTagsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageViewTagsListMouseClicked(evt);
            }
        });
        scrollImageViewTagPanel.setViewportView(imageViewTagsList);

        nextImageButton.setText(">");
        nextImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextImageButtonActionPerformed(evt);
            }
        });

        previousImageButton.setText("<");
        previousImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousImageButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        imageViewRatingSlider.setMajorTickSpacing(1);
        imageViewRatingSlider.setMaximum(5);
        imageViewRatingSlider.setMinimum(1);
        imageViewRatingSlider.setPaintLabels(true);
        imageViewRatingSlider.setPaintTicks(true);
        imageViewRatingSlider.setSnapToTicks(true);
        imageViewRatingSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        imageViewRatingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imageViewRatingSliderStateChanged(evt);
            }
        });

        imageViewTitleLabel.setText("jLabel1");

        javax.swing.GroupLayout imageViewLayout = new javax.swing.GroupLayout(imageView);
        imageView.setLayout(imageViewLayout);
        imageViewLayout.setHorizontalGroup(
            imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imageViewLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previousImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imageViewLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(imageViewRatingSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scrollImageViewTagPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE))
                        .addGap(159, 159, 159))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imageViewLayout.createSequentialGroup()
                        .addGap(18, 26, Short.MAX_VALUE)
                        .addGroup(imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(imageViewLayout.createSequentialGroup()
                                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(backButton))
                            .addGroup(imageViewLayout.createSequentialGroup()
                                .addComponent(imageViewTitleLabel)
                                .addGap(401, 401, 401)
                                .addComponent(nextImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(100, 100, 100))))
        );
        imageViewLayout.setVerticalGroup(
            imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imageViewLayout.createSequentialGroup()
                .addGroup(imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(imageViewLayout.createSequentialGroup()
                        .addGap(382, 382, 382)
                        .addComponent(previousImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(imageViewLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(imageViewLayout.createSequentialGroup()
                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(309, 309, 309)
                                .addComponent(nextImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(imageViewLayout.createSequentialGroup()
                                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(imageViewTitleLabel)))
                        .addGap(21, 21, 21)
                        .addComponent(imageViewRatingSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(scrollImageViewTagPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        getContentPane().add(imageView, "card3");

        menuBarEditMenu.setText("Edit");

        sortButtonGroup.add(menuBarAlphabeticalSortButton);
        menuBarAlphabeticalSortButton.setSelected(true);
        menuBarAlphabeticalSortButton.setText("Sorting Alphabetically");
        menuBarAlphabeticalSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarAlphabeticalSortButtonActionPerformed(evt);
            }
        });
        menuBarEditMenu.add(menuBarAlphabeticalSortButton);

        sortButtonGroup.add(menuBarRatingSortButton);
        menuBarRatingSortButton.setText("Sorting by Rating");
        menuBarRatingSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarRatingSortButtonActionPerformed(evt);
            }
        });
        menuBarEditMenu.add(menuBarRatingSortButton);
        menuBarEditMenu.add(jSeparator1);

        themeButtonGroup.add(menuBarLightThemeButton);
        menuBarLightThemeButton.setSelected(true);
        menuBarLightThemeButton.setText("Light Theme");
        menuBarLightThemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarLightThemeButtonActionPerformed(evt);
            }
        });
        menuBarEditMenu.add(menuBarLightThemeButton);

        themeButtonGroup.add(menuBarDarkThemeButton);
        menuBarDarkThemeButton.setText("Dark Theme");
        menuBarDarkThemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBarDarkThemeButtonActionPerformed(evt);
            }
        });
        menuBarEditMenu.add(menuBarDarkThemeButton);

        mainMenuBar.add(menuBarEditMenu);

        setJMenuBar(mainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileChooserButtonActionPerformed
        imageChooserWindow.showOpenDialog(this);
    }//GEN-LAST:event_openFileChooserButtonActionPerformed

    private void titleInputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleInputFieldActionPerformed

    }//GEN-LAST:event_titleInputFieldActionPerformed

    private void filepathInputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filepathInputFieldActionPerformed
        
    }//GEN-LAST:event_filepathInputFieldActionPerformed

    private void imageChooserWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageChooserWindowActionPerformed
        filepathInputField.setText(imageChooserWindow.getSelectedFile().getName());
    }//GEN-LAST:event_imageChooserWindowActionPerformed

    private void titleInputFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_titleInputFieldCaretUpdate

    }//GEN-LAST:event_titleInputFieldCaretUpdate
    
    private void addImageFinalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImageFinalizeButtonActionPerformed
        //Verify everything
        ImageIcon img = null;
        
        try
        {
            img = new ImageIcon(ImageIO.read(imageChooserWindow.getSelectedFile()));
        }
        catch(Exception e)
        {
            System.out.println("Error with reading image");
        }
        
        model.addImage(img, titleInputField.getText(), tagsInputField.getText(), ratingSlideBar.getValue());
        addImageDialogue.dispose();
        updateTagList();
    }//GEN-LAST:event_addImageFinalizeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        try 
        {
            FileOutputStream fileOutputStream = new FileOutputStream("data.txt");
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
            
            objectOutputStream.writeObject(model);
            
            fileOutputStream.close();
            objectOutputStream.close();
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(MemeDream.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        imageIterator = null;
        searchString = null;
        tagList.clear();
        selectedImage = null;
        model.setSelectedImage(null);
        model.updateFilter(new ArrayList<>(), null);
        galleryView.update();
    }//GEN-LAST:event_formWindowOpened
    
    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        
    }//GEN-LAST:event_searchBarActionPerformed

    private void imageViewMenuItemDeleteTagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageViewMenuItemDeleteTagActionPerformed
        if(tagList.contains(imageViewTagsList.getSelectedValue()))
        {
            JOptionPane.showMessageDialog(this, "Cannot delete tags currently selected", "Tag deletion warning", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            model.removeTagFromSelectedImage(imageViewTagsList.getSelectedValue());
            updateImageViewTags();
        }
    }//GEN-LAST:event_imageViewMenuItemDeleteTagActionPerformed

    private void imageViewMenuItemDeleteTagMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageViewMenuItemDeleteTagMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_imageViewMenuItemDeleteTagMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        goToAlbumView();
    }//GEN-LAST:event_backButtonActionPerformed
          
    private void previousImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousImageButtonActionPerformed
        model.setSelectedImage((CustomImage)imageIterator.previous());

        imageViewRatingSlider.setValue(selectedImage.getRating());
        imageViewTitleLabel.setText(selectedImage.getName());

        updateImageViewTags();
    }//GEN-LAST:event_previousImageButtonActionPerformed

    private void nextImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextImageButtonActionPerformed
        //Two next here in order to actually increment the element
        imageIterator.next();
        model.setSelectedImage((CustomImage)imageIterator.next());

        imageViewRatingSlider.setValue(selectedImage.getRating());
        imageViewTitleLabel.setText(selectedImage.getName());

        updateImageViewTags();
    }//GEN-LAST:event_nextImageButtonActionPerformed

    private void imageViewTagsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageViewTagsListMouseClicked
        if(evt.getButton() == evt.BUTTON3)
        {
            imageViewTagsPopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_imageViewTagsListMouseClicked

    private void imageViewAddTagsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageViewAddTagsActionPerformed
        addTagsDialogue.show();
    }//GEN-LAST:event_imageViewAddTagsActionPerformed

    private void addTagsDialogFinishButtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTagsDialogFinishButtnActionPerformed
        model.addTagsToSelectedImage(addTagsInputField.getText());
        updateImageViewTags();
        addTagsDialogue.dispose();
    }//GEN-LAST:event_addTagsDialogFinishButtnActionPerformed

    private void menuBarRatingSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarRatingSortButtonActionPerformed
        model.setSortingTypeRating();
    }//GEN-LAST:event_menuBarRatingSortButtonActionPerformed

    private void menuBarLightThemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarLightThemeButtonActionPerformed
        model.setBackgroundThemeLight();
         setAllPanelColor(this, Color.WHITE);
    }//GEN-LAST:event_menuBarLightThemeButtonActionPerformed

    private void menuBarAlphabeticalSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarAlphabeticalSortButtonActionPerformed
        model.setSortingTypeAlphabetical();
    }//GEN-LAST:event_menuBarAlphabeticalSortButtonActionPerformed

    private void menuBarDarkThemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBarDarkThemeButtonActionPerformed
        model.setBackgroundThemeDark();
        setAllPanelColor(this, new Color(128, 128, 128));
    }//GEN-LAST:event_menuBarDarkThemeButtonActionPerformed

    private void imageViewRatingSliderCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_imageViewRatingSliderCaretPositionChanged
        
    }//GEN-LAST:event_imageViewRatingSliderCaretPositionChanged

    private void imageViewRatingSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imageViewRatingSliderStateChanged
        model.setSelectedImageRating(imageViewRatingSlider.getValue());
    }//GEN-LAST:event_imageViewRatingSliderStateChanged

    private void menuBarLightThemeButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_menuBarLightThemeButtonStateChanged
        
    }//GEN-LAST:event_menuBarLightThemeButtonStateChanged

    private void menuBarDarkThemeButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_menuBarDarkThemeButtonStateChanged
        
    }//GEN-LAST:event_menuBarDarkThemeButtonStateChanged

    private void menuBarAlphabeticalSortButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_menuBarAlphabeticalSortButtonStateChanged
        
    }//GEN-LAST:event_menuBarAlphabeticalSortButtonStateChanged

    private void menuBarRatingSortButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_menuBarRatingSortButtonStateChanged
        
    }//GEN-LAST:event_menuBarRatingSortButtonStateChanged

    private void searchBarInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_searchBarInputMethodTextChanged
        
    }//GEN-LAST:event_searchBarInputMethodTextChanged

    private void searchBarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchBarCaretUpdate
        search(searchBar.getText());
    }//GEN-LAST:event_searchBarCaretUpdate
    
    private void setAllPanelColor(Container parent, Color clr)
    {
        //Source:
        //https://stackoverflow.com/questions/27774581/change-background-color-of-components-with-reference-to-color-variable-java
        for(Component c : parent.getComponents())
        {
            if(c instanceof Container)
            {
                if(c instanceof JPanel)
                {
                    c.setBackground(clr);
                }

                setAllPanelColor((Container)c, clr);
            }
        }
}
    
    protected void goToAlbumView()
    {
        ((CardLayout)getContentPane().getLayout()).first(getContentPane());
        model.setSelectedImage(null);
    }
    
    protected void goToImageView(CustomImage img)
    {
        model.setSelectedImage(img);
        ((CardLayout)getContentPane().getLayout()).next(getContentPane());
        
        imageViewRatingSlider.setValue(selectedImage.getRating());
        imageViewTitleLabel.setText(selectedImage.getName());
        updateImageViewTags();
        
    }
    
    private void updateImageViewTags()
    {
        String[] temp = new String[selectedImage.getTags().size()];
        selectedImage.getTags().toArray(temp);
        
        imageViewTagsList = new JList<>(temp);
        imageViewTagsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        imageViewTagsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageViewTagsListMouseClicked(evt);
            }
        });
        
        scrollImageViewTagPanel.setViewportView(imageViewTagsList);
    }
    
    protected void setSelectedImageToModel(CustomImage img)
    {
        model.setSelectedImage(img);
    }
    
    private void updateThumbList() 
    {
        clearThumbs();
        imagesToDraw.forEach((n)->{
            //System.out.println("name: "+ n.getName());
            addThumb(n);
        });
        updateView();
    }
    // "removes" the labels
    // should be replaced by removeImage
    protected void removeThumb()
    {
        if(thumbCount >= 1){
            thumbCount--;
            Thumbnail del = galleryView.labels.get(galleryView.labels.size()-1);
            galleryView.labels.remove(del);
            galleryView.update();
        }
    }
    
    protected void removeThumb(CustomImage selectedImage)
    {
        //galleryView.labels.remove();
    }
    
    private void search(String str)
    {
        
        searchString = str;
        model.updateFilter(tagList, searchString);
    }
    // "adds" labels
    // is addImage
    protected void addThumb(CustomImage image) 
    {
        thumbCount++;
        galleryView.labels.add(new Thumbnail(image));
        galleryView.update();
        //System.out.println("name " + image.getName());
    }
    
    protected void clearThumbs()
    {
        for(int i = galleryView.labels.size(); i>0; i-- ){
            removeThumb();
            //System.out.println("removing");
        }
        galleryView.update();
    }
    
    private void updateTagList() 
    {
        tagPanel.removeAll();
        
        
        allTags.forEach((n)->{
            TagButton tagButton = new TagButton(n);
            tagPanel.add(tagButton);
            tagButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    tagButtonActionPerformed(evt, n.getTagName());
                }
            });
        });
        tagPanel.revalidate();
        tagPanel.repaint();
        tagPanel.updateUI();
    }
    
    private void tagButtonActionPerformed(java.awt.event.ActionEvent evt, String str)
    {
        
        javax.swing.AbstractButton abstractButton = (javax.swing.AbstractButton)evt.getSource();
        
        if(abstractButton.isSelected()){
            //System.out.println(abstractButton.getName());
            tagList.add(abstractButton.getName());
        }
        else {
            tagList.remove(abstractButton.getName());
        }
        
        model.updateFilter(tagList, searchString);
        galleryView.update();
    }
    
    private void updateView() 
    {
        galleryView.update();
        
    }
    
    private void verifyImageview()
    {
        if(imageIterator == null)
        {
            nextImageButton.setEnabled(false);
            previousImageButton.setEnabled(false);
        }
        else
        {

            if(imageIterator.hasPrevious())
            {
                previousImageButton.setEnabled(true);
            }
            else
            {
                previousImageButton.setEnabled(false);
            }
            
            if(imageIterator.hasNext())
            {
                imageIterator.next();
                if(imageIterator.hasNext())
                {
                    nextImageButton.setEnabled(true);
                }
                else
                {
                    nextImageButton.setEnabled(false);
                }
                imageIterator.previous();
            }
            else
            {
                nextImageButton.setEnabled(false);
            }
        }
    }
    
    /**
     * To update
     * @param msg
     */
    @Override
    public void update(Message msg) 
    {
        imagesToDraw = msg.getFilteredImages();
        selectedImage = msg.getSelectedImage();
        //System.out.println(msg.getSelectedImage());
        
        imageIterator = null;
        
        
        if(selectedImage != null)
        {
            imagePanel.removeAll();
            imagePanel.add(new JLabel(selectedImage.getImage()));
        }
        
        imagePanel.revalidate();
        imagePanel.repaint();
        imagePanel.updateUI();
        
        if(selectedImage != null)
        {
            imageIterator = imagesToDraw.listIterator(imagesToDraw.indexOf(selectedImage));
        }
        
        
        verifyImageview();
        
        if(!allTags.equals(msg.getTags()))
        {
            allTags = (ArrayList<Tag>)msg.getTags().clone();
            updateTagList();
        }
        
        
        allTags = (ArrayList<Tag>)msg.getTags().clone();       
        
        
        
        updateThumbList();
    }
    
    protected void openAddImageDialogue()
    {
        addImageDialogue.show();
    }
    
    /*
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addImageDialogue;
    private javax.swing.JButton addImageFinalizeButton;
    private javax.swing.JButton addTagsDialogFinishButtn;
    private javax.swing.JDialog addTagsDialogue;
    private javax.swing.JTextField addTagsInputField;
    private javax.swing.JLabel addTagsInstructionLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JPanel baseView;
    private javax.swing.JLabel filePathNameLabel;
    private javax.swing.JTextField filepathInputField;
    private org.netbeans.modules.form.InvalidComponent galleryView;
    private javax.swing.JFileChooser imageChooserWindow;
    private javax.swing.JLabel imageNameLabel;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JPanel imageView;
    private javax.swing.JMenuItem imageViewAddTags;
    private javax.swing.JMenuItem imageViewMenuItemDeleteTag;
    private javax.swing.JSlider imageViewRatingSlider;
    private javax.swing.JList<String> imageViewTagsList;
    private javax.swing.JPopupMenu imageViewTagsPopupMenu;
    private javax.swing.JLabel imageViewTitleLabel;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JRadioButtonMenuItem menuBarAlphabeticalSortButton;
    private javax.swing.JRadioButtonMenuItem menuBarDarkThemeButton;
    private javax.swing.JMenu menuBarEditMenu;
    private javax.swing.JRadioButtonMenuItem menuBarLightThemeButton;
    private javax.swing.JRadioButtonMenuItem menuBarRatingSortButton;
    private javax.swing.JButton nextImageButton;
    private javax.swing.JButton openFileChooserButton;
    private javax.swing.JButton previousImageButton;
    private javax.swing.JLabel ratingLabel;
    private javax.swing.JSlider ratingSlideBar;
    private javax.swing.JScrollPane scrollImageViewTagPanel;
    private javax.swing.JTextField searchBar;
    private javax.swing.JLabel searchBarLabel;
    private javax.swing.ButtonGroup sortButtonGroup;
    private javax.swing.JPanel tagPanel;
    private javax.swing.JScrollPane tagScroller;
    private javax.swing.JTextField tagsInputField;
    private javax.swing.JLabel tagsLabel;
    private javax.swing.ButtonGroup themeButtonGroup;
    private javax.swing.JTextField titleInputField;
    // End of variables declaration//GEN-END:variables
    */
    private GalleryView galleryView;
    
    
    private javax.swing.JDialog addImageDialogue;
    private javax.swing.JButton addImageFinalizeButton;
    private javax.swing.JButton addTagsDialogFinishButtn;
    private javax.swing.JDialog addTagsDialogue;
    private javax.swing.JTextField addTagsInputField;
    private javax.swing.JLabel addTagsInstructionLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JPanel baseView;
    private javax.swing.JLabel filePathNameLabel;
    private javax.swing.JTextField filepathInputField;
    private javax.swing.JFileChooser imageChooserWindow;
    private javax.swing.JLabel imageNameLabel;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JPanel imageView;
    private javax.swing.JMenuItem imageViewAddTags;
    private javax.swing.JMenuItem imageViewMenuItemDeleteTag;
    private javax.swing.JSlider imageViewRatingSlider;
    private javax.swing.JList<String> imageViewTagsList;
    private javax.swing.JPopupMenu imageViewTagsPopupMenu;
    private javax.swing.JLabel imageViewTitleLabel;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JRadioButtonMenuItem menuBarAlphabeticalSortButton;
    private javax.swing.JRadioButtonMenuItem menuBarDarkThemeButton;
    private javax.swing.JMenu menuBarEditMenu;
    private javax.swing.JRadioButtonMenuItem menuBarLightThemeButton;
    private javax.swing.JRadioButtonMenuItem menuBarRatingSortButton;
    private javax.swing.JButton nextImageButton;
    private javax.swing.JButton openFileChooserButton;
    private javax.swing.JButton previousImageButton;
    private javax.swing.JLabel ratingLabel;
    private javax.swing.JSlider ratingSlideBar;
    private javax.swing.JScrollPane scrollImageViewTagPanel;
    private javax.swing.JTextField searchBar;
    private javax.swing.JLabel searchBarLabel;
    private javax.swing.ButtonGroup sortButtonGroup;
    private javax.swing.JPanel tagPanel;
    private javax.swing.JScrollPane tagScroller;
    private javax.swing.JTextField tagsInputField;
    private javax.swing.JLabel tagsLabel;
    private javax.swing.ButtonGroup themeButtonGroup;
    private javax.swing.JTextField titleInputField;
    
    private String searchString;
    protected ArrayList<CustomImage> imagesToDraw;
    protected ArrayList<Tag> allTags;
    protected ArrayList<String> tagList;
    protected Model model;
    int thumbCount = 0;
    protected CustomImage selectedImage;
    private ListIterator imageIterator;
}
