/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memedream;

import java.util.ArrayList;

/**
 *
 * @author Willi
 */
public class UserInterface extends javax.swing.JFrame implements Observer {

    /**
     * Creates new form UserInterface
     */
    public UserInterface(Model mod) {
        initComponents();
        java.awt.GridLayout tagLayout = new java.awt.GridLayout(0,1,5,5);
        tagPanel.setLayout(tagLayout);
        model = mod;
        imagesToDraw = new ArrayList<>();
        allTags = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        galleryView = new memedream.GalleryView();
        updateButton = new javax.swing.JButton();
        tagScroller = new javax.swing.JScrollPane();
        tagPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchBar.setToolTipText("");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        updateButton.setText("update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        tagScroller.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout tagPanelLayout = new javax.swing.GroupLayout(tagPanel);
        tagPanel.setLayout(tagPanelLayout);
        tagPanelLayout.setHorizontalGroup(
            tagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 118, Short.MAX_VALUE)
        );
        tagPanelLayout.setVerticalGroup(
            tagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 631, Short.MAX_VALUE)
        );

        tagScroller.setViewportView(tagPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tagScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updateButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(galleryView, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchBar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton)
                                .addGap(20, 20, 20)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(galleryView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(21, 21, 21)
                        .addComponent(updateButton)
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tagScroller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        updateView();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        search(searchBar.getText());
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface(model).setVisible(true);
            }
        });//*/
    }

    
    private void updateThumbList() {
        clearThumbs();
        imagesToDraw.forEach((n)->{
            //System.out.println("name: "+ n.getName());
            addThumb(n);
        });
        updateView();
    }
    // "removes" the labels
    // should be replaced by removeImage
    public void removeThumb(){
        if(thumbCount >= 1){
            thumbCount--;
            Thumbnail del = galleryView.labels.get(galleryView.labels.size()-1);
            galleryView.labels.remove(del);
            galleryView.update(galleryView.labels);
        }
    }
    
    public void removeThumb(CustomImage selectedImage){
        //galleryView.labels.remove();
    }
    private void search(String str){
        model.filter(tagList, str);
    }
    // "adds" labels
    // is addImage
    public void addThumb(CustomImage image) {
        thumbCount++;
        galleryView.labels.add(new Thumbnail(image));
        galleryView.update(galleryView.labels);
        System.out.println("name" + image.getName());
    }
    
    public void clearThumbs(){
        for(int i = galleryView.labels.size(); i>0; i-- ){
            removeThumb();
            System.out.println("removing");
        }
        galleryView.update(galleryView.labels);
    }
    
    private void updateTagList() {
        tagPanel.removeAll();
        allTags.forEach((n)->{
            TagButton tagButton = new TagButton(n);
            tagPanel.add(tagButton);
            tagButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    tagButtonActionPerformed(evt, n.getTagName());
                }
            });
        });
    }
    
    private void tagButtonActionPerformed(java.awt.event.ActionEvent evt, String str){
        javax.swing.AbstractButton abstractButton = (javax.swing.AbstractButton)evt.getSource();
        if(abstractButton.isSelected()){
            tagList.add(abstractButton.getName());
        }
        else {
            tagList.remove(abstractButton.getName());
        }
        model.filter(tagList, "");
    }
    
    private void updateView() {
        galleryView.update(galleryView.labels);
    }
    
    /**
     *
     * @param msg
     */
    @Override
    public void update(Message msg) {
        imagesToDraw = msg.getFilteredImages();
        allTags = msg.getTags();
        updateThumbList();
        updateTagList();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private memedream.GalleryView galleryView;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel tagPanel;
    private javax.swing.JScrollPane tagScroller;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
ArrayList<CustomImage> imagesToDraw;
ArrayList<Tag> allTags;
ArrayList<String> tagList;
Model model;
int thumbCount = 0;
}
